// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package twitchgql

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetStreamsResponse is returned by GetStreams on success.
type GetStreamsResponse struct {
	// Fetch live streams, ordered by the number of viewers descending.
	// languages can be empty or null, which will imply all the languages are included on the results.
	// tags are an array of tag ID as optional filters for streams.
	// DEPRECATED field arguments: platformType, languageTags, tags
	// Use StreamOptions instead.
	Streams GetStreamsStreamsStreamConnection `json:"streams"`
}

// GetStreams returns GetStreamsResponse.Streams, and is useful for accessing the field via an interface.
func (v *GetStreamsResponse) GetStreams() GetStreamsStreamsStreamConnection { return v.Streams }

// GetStreamsStreamsStreamConnection includes the requested fields of the GraphQL type StreamConnection.
// The GraphQL type's documentation follows.
//
// Paginated list of Streams.
type GetStreamsStreamsStreamConnection struct {
	PageInfo GetStreamsStreamsStreamConnectionPageInfo          `json:"pageInfo"`
	Edges    []GetStreamsStreamsStreamConnectionEdgesStreamEdge `json:"edges"`
}

// GetPageInfo returns GetStreamsStreamsStreamConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnection) GetPageInfo() GetStreamsStreamsStreamConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns GetStreamsStreamsStreamConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnection) GetEdges() []GetStreamsStreamsStreamConnectionEdgesStreamEdge {
	return v.Edges
}

// GetStreamsStreamsStreamConnectionEdgesStreamEdge includes the requested fields of the GraphQL type StreamEdge.
// The GraphQL type's documentation follows.
//
// Contains information about a Streams's relationship to a given page (connection),
// and the Stream itself.
type GetStreamsStreamsStreamConnectionEdgesStreamEdge struct {
	Node   GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream `json:"node"`
	Cursor string                                                     `json:"cursor"`
}

// GetNode returns GetStreamsStreamsStreamConnectionEdgesStreamEdge.Node, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdge) GetNode() GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream {
	return v.Node
}

// GetCursor returns GetStreamsStreamsStreamConnectionEdgesStreamEdge.Cursor, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdge) GetCursor() string { return v.Cursor }

// GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream includes the requested fields of the GraphQL type Stream.
// The GraphQL type's documentation follows.
//
// A live stream.
type GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream struct {
	// The stream's unique identifier.
	Id string `json:"id"`
	// The number of viewers currently watching the stream.
	ViewersCount int `json:"viewersCount"`
	// The user who is broadcasting the live stream.
	Broadcaster GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser `json:"broadcaster"`
	// Information about the game being streamed.
	Game GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamGame `json:"game"`
	// The time streaming started.
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.Id, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetId() string { return v.Id }

// GetViewersCount returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.ViewersCount, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetViewersCount() int {
	return v.ViewersCount
}

// GetBroadcaster returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.Broadcaster, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetBroadcaster() GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser {
	return v.Broadcaster
}

// GetGame returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.Game, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetGame() GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamGame {
	return v.Game
}

// GetCreatedAt returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStream) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// Twitch user.
type GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser struct {
	// The user's unique identifier.
	Id string `json:"id"`
	// The user's standard alphanumeric Twitch name.
	Login string `json:"login"`
	// A User's broadcast settings that persists between streams.
	BroadcastSettings GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings `json:"broadcastSettings"`
}

// GetId returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser.Id, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser) GetId() string {
	return v.Id
}

// GetLogin returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser.Login, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser) GetLogin() string {
	return v.Login
}

// GetBroadcastSettings returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser.BroadcastSettings, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUser) GetBroadcastSettings() GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings {
	return v.BroadcastSettings
}

// GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings includes the requested fields of the GraphQL type BroadcastSettings.
// The GraphQL type's documentation follows.
//
// Settings for a User's broadcast that persist between streams.
type GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings struct {
	// A flag indicating if the user's broadcast is intended for mature audiences only.
	IsMature bool `json:"isMature"`
	// The primary language that the user has configured for their broadcasts. The
	// default value is "", when the user has not indicated a primary language.
	Language Language `json:"language"`
	// The title of the user's broadcast. The default value is "", when the user has not indicated a title.
	Title string `json:"title"`
}

// GetIsMature returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings.IsMature, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings) GetIsMature() bool {
	return v.IsMature
}

// GetLanguage returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings.Language, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings) GetLanguage() Language {
	return v.Language
}

// GetTitle returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings.Title, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamBroadcasterUserBroadcastSettings) GetTitle() string {
	return v.Title
}

// GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamGame includes the requested fields of the GraphQL type Game.
// The GraphQL type's documentation follows.
//
// A Game is often the subject of a Stream on Twitch.
type GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamGame struct {
	// The name of the game. This string is untranslated.
	// This field should only be used in limited occassions, like tracking and URLs.
	// You should use displayName for all all game names shown to the users.
	Name string `json:"name"`
	// The game's unique Twitch identifier.
	// It is used to associate games with product offers.
	Id string `json:"id"`
}

// GetName returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamGame.Name, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamGame) GetName() string {
	return v.Name
}

// GetId returns GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamGame.Id, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionEdgesStreamEdgeNodeStreamGame) GetId() string { return v.Id }

// GetStreamsStreamsStreamConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// PageInfo is a special field which contains information about the page,
// specifically the cursors which the page starts and ends, and whether or
// not the client can forward-paginate or backward-paginate.
//
// This is part of the Relay Cursor Connections Specification:
// https://facebook.github.io/relay/graphql/connections.htm.
type GetStreamsStreamsStreamConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns GetStreamsStreamsStreamConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetStreamsStreamsStreamConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetUserModsResponse is returned by GetUserMods on success.
type GetUserModsResponse struct {
	// Get a user by their ID or login.
	// If no ID or login is provided, null is returned.
	// Lookup type can tell the resolver to include all users (inclusing deleted and
	// suspended accounts) on the lookup, defaults to only retrieve active users.
	User GetUserModsUser `json:"user"`
}

// GetUser returns GetUserModsResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserModsResponse) GetUser() GetUserModsUser { return v.User }

// GetUserModsUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// Twitch user.
type GetUserModsUser struct {
	// Returns a paginated list of channel moderators.
	Mods GetUserModsUserModsModConnection `json:"mods"`
}

// GetMods returns GetUserModsUser.Mods, and is useful for accessing the field via an interface.
func (v *GetUserModsUser) GetMods() GetUserModsUserModsModConnection { return v.Mods }

// GetUserModsUserModsModConnection includes the requested fields of the GraphQL type ModConnection.
// The GraphQL type's documentation follows.
//
// Paginated list of moderators of a channel.
type GetUserModsUserModsModConnection struct {
	// The elements of the list.
	Edges []GetUserModsUserModsModConnectionEdgesModEdge `json:"edges"`
}

// GetEdges returns GetUserModsUserModsModConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetUserModsUserModsModConnection) GetEdges() []GetUserModsUserModsModConnectionEdgesModEdge {
	return v.Edges
}

// GetUserModsUserModsModConnectionEdgesModEdge includes the requested fields of the GraphQL type ModEdge.
// The GraphQL type's documentation follows.
//
// Element in a list of moderators of a channel.
type GetUserModsUserModsModConnectionEdgesModEdge struct {
	// The user that is a moderator.
	Node GetUserModsUserModsModConnectionEdgesModEdgeNodeUser `json:"node"`
}

// GetNode returns GetUserModsUserModsModConnectionEdgesModEdge.Node, and is useful for accessing the field via an interface.
func (v *GetUserModsUserModsModConnectionEdgesModEdge) GetNode() GetUserModsUserModsModConnectionEdgesModEdgeNodeUser {
	return v.Node
}

// GetUserModsUserModsModConnectionEdgesModEdgeNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// Twitch user.
type GetUserModsUserModsModConnectionEdgesModEdgeNodeUser struct {
	// The user's standard alphanumeric Twitch name.
	Login string `json:"login"`
}

// GetLogin returns GetUserModsUserModsModConnectionEdgesModEdgeNodeUser.Login, and is useful for accessing the field via an interface.
func (v *GetUserModsUserModsModConnectionEdgesModEdgeNodeUser) GetLogin() string { return v.Login }

// An enumeration of broadcaster languages.
type Language string

const (
	// Arabic.
	LanguageAr Language = "AR"
	// American Sign Language.
	LanguageAsl Language = "ASL"
	// Bulgarian.
	LanguageBg Language = "BG"
	// Catalan.
	LanguageCa Language = "CA"
	// Czech.
	LanguageCs Language = "CS"
	// Danish.
	LanguageDa Language = "DA"
	// German.
	LanguageDe Language = "DE"
	// Greek.
	LanguageEl Language = "EL"
	// English.
	LanguageEn Language = "EN"
	// Spanish.
	LanguageEs Language = "ES"
	// Finnish.
	LanguageFi Language = "FI"
	// French.
	LanguageFr Language = "FR"
	// Hindi.
	LanguageHi Language = "HI"
	// Hungarian.
	LanguageHu Language = "HU"
	// Indonesian.
	LanguageId Language = "ID"
	// Italian.
	LanguageIt Language = "IT"
	// Japanese.
	LanguageJa Language = "JA"
	// Korean.
	LanguageKo Language = "KO"
	// Malay.
	LanguageMs Language = "MS"
	// Dutch.
	LanguageNl Language = "NL"
	// Norwegian.
	LanguageNo Language = "NO"
	// Other.
	LanguageOther Language = "OTHER"
	// Polish.
	LanguagePl Language = "PL"
	// Portuguese.
	LanguagePt Language = "PT"
	// Romanian.
	LanguageRo Language = "RO"
	// Russian.
	LanguageRu Language = "RU"
	// Slovak.
	LanguageSk Language = "SK"
	// Swedish.
	LanguageSv Language = "SV"
	// Thai.
	LanguageTh Language = "TH"
	// Tagalog.
	LanguageTl Language = "TL"
	// Turkish.
	LanguageTr Language = "TR"
	// Ukrainian.
	LanguageUk Language = "UK"
	// Vietnamese.
	LanguageVi Language = "VI"
	// Chinese.
	LanguageZh Language = "ZH"
	// Chinese (Hong Kong).
	LanguageZhHk Language = "ZH_HK"
)

// __GetStreamsInput is used internally by genqlient
type __GetStreamsInput struct {
	First  int    `json:"first"`
	Cursor string `json:"cursor"`
}

// GetFirst returns __GetStreamsInput.First, and is useful for accessing the field via an interface.
func (v *__GetStreamsInput) GetFirst() int { return v.First }

// GetCursor returns __GetStreamsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetStreamsInput) GetCursor() string { return v.Cursor }

// __GetUserModsInput is used internally by genqlient
type __GetUserModsInput struct {
	Login string `json:"login"`
}

// GetLogin returns __GetUserModsInput.Login, and is useful for accessing the field via an interface.
func (v *__GetUserModsInput) GetLogin() string { return v.Login }

// first must be between 1 and 30.
// cursor is not included in the result.
func GetStreams(
	ctx context.Context,
	client graphql.Client,
	first int,
	cursor string,
) (*GetStreamsResponse, error) {
	req := &graphql.Request{
		OpName: "GetStreams",
		Query: `
query GetStreams ($first: Int!, $cursor: Cursor!) {
	streams(first: $first, after: $cursor) {
		pageInfo {
			hasNextPage
		}
		edges {
			node {
				id
				viewersCount
				broadcaster {
					id
					login
					broadcastSettings {
						isMature
						language
						title
					}
				}
				game {
					name
					id
				}
				viewersCount
				createdAt
			}
			cursor
		}
	}
}
`,
		Variables: &__GetStreamsInput{
			First:  first,
			Cursor: cursor,
		},
	}
	var err error

	var data GetStreamsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUserMods(
	ctx context.Context,
	client graphql.Client,
	login string,
) (*GetUserModsResponse, error) {
	req := &graphql.Request{
		OpName: "GetUserMods",
		Query: `
query GetUserMods ($login: String!) {
	user(login: $login) {
		mods {
			edges {
				node {
					login
				}
			}
		}
	}
}
`,
		Variables: &__GetUserModsInput{
			Login: login,
		},
	}
	var err error

	var data GetUserModsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
