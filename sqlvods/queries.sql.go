// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package sqlvods

import (
	"context"
	"time"
)

type AddManyStreamsParams struct {
	LastUpdatedAt time.Time
	MaxViews      int32
	StartTime     time.Time
	StreamerID    string
	StreamID      string
	TimeSeries    []byte
}

const addStream = `-- name: AddStream :one
INSERT INTO
  streams (last_updated_at, max_views, start_time, streamer_id, stream_id, time_series)
VALUES
  ($1, $2, $3, $4, $5, $6)
RETURNING
  id, streamer_id, stream_id, start_time, max_views, last_updated_at, time_series
`

type AddStreamParams struct {
	LastUpdatedAt time.Time
	MaxViews      int32
	StartTime     time.Time
	StreamerID    string
	StreamID      string
	TimeSeries    []byte
}

func (q *Queries) AddStream(ctx context.Context, arg AddStreamParams) (Stream, error) {
	row := q.db.QueryRow(ctx, addStream,
		arg.LastUpdatedAt,
		arg.MaxViews,
		arg.StartTime,
		arg.StreamerID,
		arg.StreamID,
		arg.TimeSeries,
	)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.StreamerID,
		&i.StreamID,
		&i.StartTime,
		&i.MaxViews,
		&i.LastUpdatedAt,
		&i.TimeSeries,
	)
	return i, err
}

const getStreamByStreamId = `-- name: GetStreamByStreamId :one
SELECT 
  id, last_updated_at, max_views, start_time, streamer_id, stream_id, time_series
FROM
  streams
WHERE
  id = $1 LIMIT 1
`

type GetStreamByStreamIdRow struct {
	ID            string
	LastUpdatedAt time.Time
	MaxViews      int32
	StartTime     time.Time
	StreamerID    string
	StreamID      string
	TimeSeries    []byte
}

func (q *Queries) GetStreamByStreamId(ctx context.Context, id string) (GetStreamByStreamIdRow, error) {
	row := q.db.QueryRow(ctx, getStreamByStreamId, id)
	var i GetStreamByStreamIdRow
	err := row.Scan(
		&i.ID,
		&i.LastUpdatedAt,
		&i.MaxViews,
		&i.StartTime,
		&i.StreamerID,
		&i.StreamID,
		&i.TimeSeries,
	)
	return i, err
}

const getStreamForEachStreamId = `-- name: GetStreamForEachStreamId :many
SELECT
  id, last_updated_at, max_views, start_time, streamer_id, stream_id, time_series
FROM 
  streams
WHERE
  id = ANY($1::string[])
`

type GetStreamForEachStreamIdRow struct {
	ID            string
	LastUpdatedAt time.Time
	MaxViews      int32
	StartTime     time.Time
	StreamerID    string
	StreamID      string
	TimeSeries    []byte
}

func (q *Queries) GetStreamForEachStreamId(ctx context.Context, dollar_1 []string) ([]GetStreamForEachStreamIdRow, error) {
	rows, err := q.db.Query(ctx, getStreamForEachStreamId, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStreamForEachStreamIdRow
	for rows.Next() {
		var i GetStreamForEachStreamIdRow
		if err := rows.Scan(
			&i.ID,
			&i.LastUpdatedAt,
			&i.MaxViews,
			&i.StartTime,
			&i.StreamerID,
			&i.StreamID,
			&i.TimeSeries,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
