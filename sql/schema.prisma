datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model streams {
  id                                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  streamer_id                           String
  stream_id                             String
  start_time                            DateTime
  max_views                             BigInt
  last_updated_at                       DateTime
  streamer_login_at_start               String
  language_at_start                     String
  title_at_start                        String
  game_name_at_start                    String
  game_id_at_start                      String
  profile_image_url_at_start            String
  box_art_url_at_start                  String
  is_mature_at_start                    Boolean
  last_updated_minus_start_time_seconds Float

  recording_fetched_at DateTime?
  gzipped_bytes        Bytes?
  hls_domain           String?
  hls_duration_seconds Float?
  bytes_found          Boolean?
  public               Boolean?
  sub_only             Boolean?
  seek_previews_domain String?

  @@unique([stream_id, start_time]) // uniquely identifies stream

  @@index([streamer_id, start_time]) // used to fetch streams from streamer ordered by time
  @@index([streamer_login_at_start, start_time]) // used to get newest stream associated with streamer login
  @@index([last_updated_at]) // used to get most recently updated stream
  @@index([start_time]) // used to delete oldest streams

  @@index([public, sub_only, max_views, id]) // filter by public, sub_only then sort by (max_views, id) DESC

  @@index([game_id_at_start, public, sub_only, max_views, id]) // filter by (game_id_at_start, public, sub_only) then sort by (max_views, id) DESC
  @@index([language_at_start, public, sub_only, max_views, id]) // filter by (language_at_start, public, sub_only) then sort by (max_views, id) DESC
}
